#!/usr/bin/env bash

set -e

provsn_template() {
  local src="$1"
  local dest="$2"

  # escape double-quotes so they won't interfere with rendering
  local tpl="$(cat $src | sed -e 's/"/\\"/g')"
  # render the template by printing it out, let shell take care of variables
  local out="$(eval "printf %s\\\n \"$tpl\"")"

  [ -z "$out" ] \
    && echo "error: unknown template: $src" 1>&2 \
    && exit 1

  # detect and raise unknown var errors
  for line in "$out"; do
    local regexp='ERR_UNKNOWN_VAR_([0-9a-z_]+)'
    [[ "$line" =~ $regexp ]] \
      && echo "error: unknown var: ${BASH_REMATCH[1]} (in $src)" 1>&2 \
      && exit 1
  done

  printf %s\\n "$out" > "$dest"
}

var() {
  local key="$1"
  [ "$2" ] && key="$1_$2"
  local prefixes="all_ $host""_"

  # default to an error message, in case none of the prefixes yields a value
  for p in $prefixes; do
    # try printing the variable with that prefix
    local try=$(eval 'printf %s\\n "${'$p$key'[@]}"')
    # if it yielded something, save that as the result
    [ -z "$try" ] || local value=${try[@]}
  done

  declare -p value 2>/dev/null >/dev/null || local value="ERR_UNKNOWN_VAR_$key"

  printf %s\\n "${value[@]}"
}

lookup() {
  local key=$1
  local value=$(var "$key")

  [ "$value" == "ERR_UNKNOWN_VAR_$key" ] \
    && echo "error: unknown var: $key (in unit=$unit)" 1>&2 \
    && exit 1

  printf %s\\n "${value[@]}"
}

find_units() {
  for u in `find ./*/ -name env.sh | xargs readlink -f | xargs dirname`; do
    u="$u/"
    u="${u#$(pwd)/}"
    u="${u%/}"
    [ -z "$u" ] && u="."
    echo "$u"
  done | LC_ALL=C sort
}

resolve_pattern() {
  local hosts=${provsn_hosts[@]}
  [ ! -z "$1" ] && [ "$1" != "all" ] && hosts=($1)
  printf %s\\n "${hosts[@]}"
}

provsn_usage() {
  echo "specify a command: provsn build|upload|install|exec|run|units"
}

provsn_upload() {
  local hosts=($1)

  sshhosts=()
  for host in ${hosts[@]}; do
    sshhosts+=("-H $(lookup ssh)")
  done
  echo parallel-ssh -i -p 20 "${sshhosts[@]}" "rm -rf /opt/provsn"
  parallel-ssh -i -p 20 "${sshhosts[@]}" "rm -rf /opt/provsn"
  echo parallel-scp -v -i -r -p 20 "${sshhosts[@]}" "$provsn_root/.build" /opt/provsn
  parallel-scp -v -r -p 20 "${sshhosts[@]}" "$provsn_root/.build" /opt/provsn

  # for host in ${hosts[@]}; do
  #   echo "$host: upload"
  #   ssh $(lookup ssh_options) $(lookup ssh) "rm -rf /opt/provsn"
  #   scp -qr $(lookup ssh_options) "$provsn_root/.build/$host" "$(lookup ssh):/opt/provsn"
  # done
  echo "upload success"
  host=
}

provsn_exec() {
  local hosts=($1)
  local cmd="$2"

  sshhosts=()
  for host in ${hosts[@]}; do
    # echo "$host: exec $cmd"
    # ssh $(lookup ssh_options) $(lookup ssh) "cd /opt/provsn && $cmd"
    sshhosts+=("-H $(lookup ssh)")
  done
  host=
  sshopts=$(lookup ssh_options)
  echo parallel-ssh -i -p 20 -t 0 -x "'$sshopts'" "${sshhosts[@]}" "$cmd"
  parallel-ssh -i -p 20 -t 0 -x "$sshopts" "${sshhosts[@]}" "cd /opt/provsn && $cmd"
  echo "exec success"
}

provsn_build() {
  local hosts=($1)

  rm -rf .build/
  mkdir .build/

  for host in ${hosts[@]}; do
    echo "$host: build"

    mkdir "$provsn_root/.build/$host"
    cp -a "$0" env.sh "$provsn_root/.build/$host/"
    echo "$host" > "$provsn_root/.build/$host/host"

    local omit_units=($(lookup omit_build))
    for unit in $(lookup units); do
      local omit=$(printf %s\\n "${omit_units[@]}" | grep -xF $unit || true)
      if [ ! -z "$omit" ]; then
        echo "$host: omit $unit"
      else
        echo "$host: build $unit"
        local parent_dir="$provsn_root/.build/$host/$(dirname $unit)"
        [ ! -d "$parent_dir" ] && mkdir -p $parent_dir
        [ -d "$provsn_root/$unit" ] && cp -a "$provsn_root/$unit" "$provsn_root/.build/$host/$unit"
      fi
    done
    unit=

    provsn_root="$provsn_root/.build/$host" provsn_run build.sh
    echo "$host: build success"
  done
  host=
}

provsn_run() {
  local host=$(cat "$provsn_root/host")
  local script="$1"

  for unit in $(lookup units); do
    if [ -x "$provsn_root/$unit/$script" ]; then
      echo "$host: $unit $script"
      (cd "$provsn_root/$unit" && . "$script")
    fi
  done
  unit=
}

provsn_root=`pwd`

# printf %s\\n "$(find_units)"
# exit 1

. env.sh
for unit in $(find_units); do . "$unit/env.sh"; done
unit=

case $1 in
deploy)
  provsn_build "$(resolve_pattern "$2")"
  provsn_upload "$(resolve_pattern "$2")"
  provsn_exec "$(resolve_pattern "$2")" "./provsn run install.sh"
  ;;
build)
  # creates host's build dir
  # copies provsn and env.sh files to build dirs
  # put the host name somewhere in the build dirs
  # builddir/provsn run build.sh
  provsn_build "$(resolve_pattern "$2")"
  ;;
upload)
  # uploads each host's build dir
  provsn_upload "$(resolve_pattern "$2")"
  ;;
install)
  # execs provsn run install.sh
  provsn_exec "$(resolve_pattern "$2")" "./provsn run install.sh"
  ;;
run)
  # runs the script
  # requires host name in builddir
  provsn_run "$2"
  ;;
exec)
  # executes command in build dir on each host
  provsn_exec "$(resolve_pattern "$2")" "$3"
  ;;
units)
  printf %s\\n "$(find_units)"
  ;;
"")
  provsn_usage
  ;;
*)
  { echo "Unknown command: $1";
    echo;
    provsn_usage; } 1>&2
  ;;
esac
